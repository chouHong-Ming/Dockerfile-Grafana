##################### Grafana Configuration Example #####################
#
# Everything has defaults so you only need to uncomment things you want to
# change

# possible values : production, development
;app_mode = APP_MODE

# instance name, defaults to HOSTNAME environment variable value or hostname if HOSTNAME var is empty
;instance_name = INSTANCE_NAME

#################################### Paths ####################################
[paths]
# Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
;data = PATHS_DATA

# Temporary files in `data` directory older than given duration will be removed
;temp_data_lifetime = TEMP_DATA_LIFETIME

# Directory where grafana can store logs
;logs = PATHS_LOGS

# Directory where grafana will automatically scan and look for plugins
;plugins = PATHS_PLUGINS

# folder that contains provisioning config files that grafana will apply on startup and while running.
;provisioning = PATHS_PROVISIONING

#################################### Server ####################################
[server]
# Protocol (http, https, h2, socket)
;protocol = SERVER_PROTOCOL

# The ip address to bind to, empty will bind to all interfaces
;http_addr = SERVER_HTTP_ADDR

# The http port  to use
;http_port = SERVER_HTTP_PORT

# The public facing domain name used to access grafana from a browser
;domain = SERVER_DOMAIN

# Redirect to correct domain if host header does not match domain
# Prevents DNS rebinding attacks
;enforce_domain = SERVER_ENFORCE_DOMAIN

# The full public facing url you use in browser, used for redirects and emails
# If you use reverse proxy and sub path specify full url (with sub path)
;root_url = SERVER_ROOT_URL

# Serve Grafana from subpath specified in `root_url` setting. By default it is set to `false` for compatibility reasons.
;serve_from_sub_path = SERVER_SERVE_FROM_SUB_PATH

# Log web requests
;router_logging = SERVER_ROUTER_LOGGING

# the path relative working path
;static_root_path = SERVER_STATIC_ROOT_PATH

# enable gzip
;enable_gzip = SERVER_ENABLE_GZIP

# https certs & key file
;cert_file = SERVER_CERT_FILE
;cert_key = SERVER_CERT_KEY

# Unix socket path
;socket = SERVER_SOCKET

# CDN Url
;cdn_url = SERVER_CDN_URL

#################################### Database ####################################
[database]
# You can configure the database connection by specifying type, host, name, user and password
# as separate properties or as on string using the url properties.

# Either "mysql", "postgres" or "sqlite3", it's your choice
;type = DATABASE_TYPE
;host = DATABASE_HOST
;name = DATABASE_NAME
;user = DATABASE_USER
# If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
;password = DATABASE_PASSWORD

# Use either URL or the previous fields to configure the database
# Example: mysql://user:secret@host:port/database
;url = DATABASE_URL

# For "postgres" only, either "disable", "require" or "verify-full"
;ssl_mode = DATABASE_SSL_MODE

;ca_cert_path = DATABASE_CA_CERT_PATH
;client_key_path = DATABASE_CLIENT_KEY_PATH
;client_cert_path = DATABASE_CLIENT_CERT_PATH
;server_cert_name = DATABASE_SERVER_CERT_NAME

# For "sqlite3" only, path relative to data_path setting
;path = DATABASE_PATH

# Max idle conn setting default is 2
;max_idle_conn = DATABASE_MAX_IDLE_CONN

# Max conn setting default is 0 (mean not set)
;max_open_conn = DATABASE_MAX_OPEN_CONN

# Connection Max Lifetime default is 14400 (means 14400 seconds or 4 hours)
;conn_max_lifetime = DATABASE_CONN_MAX_LIFETIME

# Set to true to log the sql calls and execution times.
;log_queries = DATABASE_LOG_QUERIES

# For "sqlite3" only. cache mode setting used for connecting to the database. (private, shared)
;cache_mode = DATABASE_CACHE_MODE

################################### Data sources #########################
[datasources]
# Upper limit of data sources that Grafana will return. This limit is a temporary configuration and it will be deprecated when pagination will be introduced on the list data sources API.
;datasource_limit = DATASOURCE_LIMIT

#################################### Cache server #############################
[remote_cache]
# Either "redis", "memcached" or "database" default is "database"
;type = REMOTE_CACHE_TYPE

# cache connectionstring options
# database: will use Grafana primary database.
# redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=0,ssl=false`. Only addr is required. ssl may be 'true', 'false', or 'insecure'.
# memcache: 127.0.0.1:11211
;connstr = REMOTE_CACHE_CONNSTR

#################################### Data proxy ###########################
[dataproxy]

# This enables data proxy logging, default is false
;logging = DATAPROXY_LOGGING

# How long the data proxy waits before timing out, default is 30 seconds.
# This setting also applies to core backend HTTP data sources where query requests use an HTTP client with timeout set.
;timeout = DATAPROXY_TIMEOUT

# How many seconds the data proxy waits before sending a keepalive probe request.
;keep_alive_seconds = DATAPROXY_KEEP_ALIVE_SECONDS

# How many seconds the data proxy waits for a successful TLS Handshake before timing out.
;tls_handshake_timeout_seconds = DATAPROXY_TLS_HANDSHAKE_TIMEOUT_SECONDS

# How many seconds the data proxy will wait for a server's first response headers after
# fully writing the request headers if the request has an "Expect: 100-continue"
# header. A value of 0 will result in the body being sent immediately, without
# waiting for the server to approve.
;expect_continue_timeout_seconds = DATAPROXY_EXPECT_CONTINUE_TIMEOUT_SECONDS

# The maximum number of idle connections that Grafana will keep alive.
;max_idle_connections = DATAPROXY_MAX_IDLE_CONNECTIONS

# How many seconds the data proxy keeps an idle connection open before timing out.
;idle_conn_timeout_seconds = DATAPROXY_IDLE_CONN_TIMEOUT_SECONDS

# If enabled and user is not anonymous, data proxy will add X-Grafana-User header with username into the request, default is false.
;send_user_header = DATAPROXY_SEND_USER_HEADER

#################################### Analytics ####################################
[analytics]
# Server reporting, sends usage counters to stats.grafana.org every 24 hours.
# No ip addresses are being tracked, only simple counters to track
# running instances, dashboard and error counts. It is very helpful to us.
# Change this option to false to disable reporting.
;reporting_enabled = ANALYTICS_REPORTING_ENABLED

# The name of the distributor of the Grafana instance. Ex hosted-grafana, grafana-labs
;reporting_distributor = ANALYTICS_REPORTING_DISTRIBUTOR

# Set to false to disable all checks to https://grafana.net
# for new versions (grafana itself and plugins), check is used
# in some UI views to notify that grafana or plugin update exists
# This option does not cause any auto updates, nor send any information
# only a GET request to http://grafana.com to get latest versions
;check_for_updates = ANALYTICS_CHECK_FOR_UPDATES

# Google Analytics universal tracking code, only enabled if you specify an id here
;google_analytics_ua_id = ANALYTICS_GOOGLE_ANALYTICS_UA_ID

# Google Tag Manager ID, only enabled if you specify an id here
;google_tag_manager_id = ANALYTICS_GOOGLE_TAG_MANAGER_ID

#################################### Security ####################################
[security]
# disable creation of admin user on first start of grafana
;disable_initial_admin_creation = SECURITY_DISABLE_INITIAL_ADMIN_CREATION

# default admin user, created on startup
;admin_user = SECURITY_ADMIN_USER

# default admin password, can be changed before first start of grafana,  or in profile settings
;admin_password = SECURITY_ADMIN_PASSWORD

# used for signing
;secret_key = SECURITY_SECRET_KEY

# disable gravatar profile images
;disable_gravatar = SECURITY_DISABLE_GRAVATAR

# data source proxy whitelist (ip_or_domain:port separated by spaces)
;data_source_proxy_whitelist = SECURITY_DATA_SOURCE_PROXY_WHITELIST

# disable protection against brute force login attempts
;disable_brute_force_login_protection = SECURITY_DISABLE_BRUTE_FORCE_LOGIN_PROTECTION

# set to true if you host Grafana behind HTTPS. default is false.
;cookie_secure = SECURITY_COOKIE_SECURE

# set cookie SameSite attribute. defaults to `lax`. can be set to "lax", "strict", "none" and "disabled"
;cookie_samesite = SECURITY_COOKIE_SAMESITE

# set to true if you want to allow browsers to render Grafana in a <frame>, <iframe>, <embed> or <object>. default is false.
;allow_embedding = SECURITY_ALLOW_EMBEDDING

# Set to true if you want to enable http strict transport security (HSTS) response header.
# This is only sent when HTTPS is enabled in this configuration.
# HSTS tells browsers that the site should only be accessed using HTTPS.
;strict_transport_security = SECURITY_STRICT_TRANSPORT_SECURITY

# Sets how long a browser should cache HSTS. Only applied if strict_transport_security is enabled.
;strict_transport_security_max_age_seconds = SECURITY_STRICT_TRANSPORT_SECURITY_MAX_AGE_SECONDS

# Set to true if to enable HSTS preloading option. Only applied if strict_transport_security is enabled.
;strict_transport_security_preload = SECURITY_STRICT_TRANSPORT_SECURITY_PRELOAD

# Set to true if to enable the HSTS includeSubDomains option. Only applied if strict_transport_security is enabled.
;strict_transport_security_subdomains = SECURITY_STRICT_TRANSPORT_SECURITY_SUBDOMAINS

# Set to true to enable the X-Content-Type-Options response header.
# The X-Content-Type-Options response HTTP header is a marker used by the server to indicate that the MIME types advertised
# in the Content-Type headers should not be changed and be followed.
;x_content_type_options = SECURITY_X_CONTENT_TYPE_OPTIONS

# Set to true to enable the X-XSS-Protection header, which tells browsers to stop pages from loading
# when they detect reflected cross-site scripting (XSS) attacks.
;x_xss_protection = SECURITY_X_XSS_PROTECTION

# Enable adding the Content-Security-Policy header to your requests.
# CSP allows to control resources the user agent is allowed to load and helps prevent XSS attacks.
;content_security_policy = SECURITY_CONTENT_SECURITY_POLICY

# Set Content Security Policy template used when adding the Content-Security-Policy header to your requests.
# $NONCE in the template includes a random nonce.
;content_security_policy_template = SECURITY_CONTENT_SECURITY_POLICY_TEMPLATE

#################################### Snapshots ###########################
[snapshots]
# snapshot sharing options
;external_enabled = SNAPSHOTS_EXTERNAL_ENABLED
;external_snapshot_url = SNAPSHOTS_EXTERNAL_SNAPSHOT_URL
;external_snapshot_name = SNAPSHOTS_EXTERNAL_SNAPSHOT_NAME

# Set to true to enable this Grafana instance act as an external snapshot server and allow unauthenticated requests for
# creating and deleting snapshots.
;public_mode = SNAPSHOTS_PUBLIC_MODE

# remove expired snapshot
;snapshot_remove_expired = SNAPSHOTS_SNAPSHOT_REMOVE_EXPIRED

#################################### Dashboards History ##################
[dashboards]
# Number dashboard versions to keep (per dashboard). Default: 20, Minimum: 1
;versions_to_keep = DASHBOARDS_VERSIONS_TO_KEEP

# Minimum dashboard refresh interval. When set, this will restrict users to set the refresh interval of a dashboard lower than given interval. Per default this is 5 seconds.
# The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
;min_refresh_interval = DASHBOARDS_MIN_REFRESH_INTERVAL

# Path to the default home dashboard. If this value is empty, then Grafana uses StaticRootPath + "dashboards/home.json"
;default_home_dashboard_path = DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH

#################################### Users ###############################
[users]
# disable user signup / registration
;allow_sign_up = USERS_ALLOW_SIGN_UP

# Allow non admin users to create organizations
;allow_org_create = USERS_ALLOW_ORG_CREATE

# Set to true to automatically assign new users to the default organization (id 1)
;auto_assign_org = USERS_AUTO_ASSIGN_ORG

# Set this value to automatically add new users to the provided organization (if auto_assign_org above is set to true)
;auto_assign_org_id = USERS_AUTO_ASSIGN_ORG_ID

# Default role new users will be automatically assigned (if disabled above is set to true)
;auto_assign_org_role = USERS_AUTO_ASSIGN_ORG_ROLE

# Require email validation before sign up completes
;verify_email_enabled = USERS_VERIFY_EMAIL_ENABLED

# Background text for the user field on the login page
;login_hint = USERS_LOGIN_HINT
;password_hint = USERS_PASSWORD_HINT

# Default UI theme ("dark" or "light")
;default_theme = USERS_DEFAULT_THEME

# External user management, these options affect the organization users view
;external_manage_link_url = USERS_EXTERNAL_MANAGE_LINK_URL
;external_manage_link_name = USERS_EXTERNAL_MANAGE_LINK_NAME
;external_manage_info = USERS_EXTERNAL_MANAGE_INFO

# Viewers can edit/inspect dashboard settings in the browser. But not save the dashboard.
;viewers_can_edit = USERS_VIEWERS_CAN_EDIT

# Editors can administrate dashboard, folders and teams they create
;editors_can_admin = USERS_EDITORS_CAN_ADMIN

# The duration in time a user invitation remains valid before expiring. This setting should be expressed as a duration. Examples: 6h (hours), 2d (days), 1w (week). Default is 24h (24 hours). The minimum supported duration is 15m (15 minutes).
;user_invite_max_lifetime_duration = USERS_USER_INVITE_MAX_LIFETIME_DURATION

# Enter a comma-separated list of users login to hide them in the Grafana UI. These users are shown to Grafana admins and themselves.
; hidden_users = USERS_HIDDEN_USERS

[auth]
# Login cookie name
;login_cookie_name = AUTH_LOGIN_COOKIE_NAME

# The maximum lifetime (duration) an authenticated user can be inactive before being required to login at next visit. Default is 7 days (7d). This setting should be expressed as a duration, e.g. 5m (minutes), 6h (hours), 10d (days), 2w (weeks), 1M (month). The lifetime resets at each successful token rotation.
;login_maximum_inactive_lifetime_duration = AUTH_LOGIN_MAXIMUM_INACTIVE_LIFETIME_DURATION

# The maximum lifetime (duration) an authenticated user can be logged in since login time before being required to login. Default is 30 days (30d). This setting should be expressed as a duration, e.g. 5m (minutes), 6h (hours), 10d (days), 2w (weeks), 1M (month).
;login_maximum_lifetime_duration = AUTH_LOGIN_MAXIMUM_LIFETIME_DURATION

# How often should auth tokens be rotated for authenticated users when being active. The default is each 10 minutes.
;token_rotation_interval_minutes = AUTH_TOKEN_ROTATION_INTERVAL_MINUTES

# Set to true to disable (hide) the login form, useful if you use OAuth, defaults to false
;disable_login_form = AUTH_DISABLE_LOGIN_FORM

# Set to true to disable the signout link in the side menu. useful if you use auth.proxy, defaults to false
;disable_signout_menu = AUTH_DISABLE_SIGNOUT_MENU

# URL to redirect the user to after sign out
;signout_redirect_url = AUTH_SIGNOUT_REDIRECT_URL

# Set to true to attempt login with OAuth automatically, skipping the login screen.
# This setting is ignored if multiple OAuth providers are configured.
;oauth_auto_login = AUTH_OAUTH_AUTO_LOGIN

# OAuth state max age cookie duration in seconds. Defaults to 600 seconds.
;oauth_state_cookie_max_age = AUTH_OAUTH_STATE_COOKIE_MAX_AGE

# limit of api_key seconds to live before expiration
;api_key_max_seconds_to_live = AUTH_API_KEY_MAX_SECONDS_TO_LIVE

# Set to true to enable SigV4 authentication option for HTTP-based datasources.
;sigv4_auth_enabled = AUTH_SIGV4_AUTH_ENABLED

#################################### Anonymous Auth ######################
[auth.anonymous]
# enable anonymous access
;enabled = AUTH_ANONYMOUS_ENABLED

# specify organization name that should be used for unauthenticated users
;org_name = AUTH_ANONYMOUS_ORG_NAME

# specify role for unauthenticated users
;org_role = AUTH_ANONYMOUS_ORG_ROLE

# mask the Grafana version number for unauthenticated users
;hide_version = AUTH_ANONYMOUS_HIDE_VERSION

#################################### GitHub Auth ##########################
[auth.github]
;enabled = AUTH_GITHUB_ENABLED
;allow_sign_up = AUTH_GITHUB_ALLOW_SIGN_UP
;client_id = AUTH_GITHUB_CLIENT_ID
;client_secret = AUTH_GITHUB_CLIENT_SECRET
;scopes = AUTH_GITHUB_SCOPES
;auth_url = AUTH_GITHUB_AUTH_URL
;token_url = AUTH_GITHUB_TOKEN_URL
;api_url = AUTH_GITHUB_API_URL
;allowed_domains = AUTH_GITHUB_ALLOWED_DOMAINS
;team_ids = AUTH_GITHUB_TEAM_IDS
;allowed_organizations = AUTH_GITHUB_ALLOWED_ORGANIZATIONS

#################################### GitLab Auth #########################
[auth.gitlab]
;enabled = AUTH_GITLAB_ENABLED
;allow_sign_up = AUTH_GITLAB_ALLOW_SIGN_UP
;client_id = AUTH_GITLAB_CLIENT_ID
;client_secret = AUTH_GITLAB_CLIENT_SECRET
;scopes = AUTH_GITLAB_SCOPES
;auth_url = AUTH_GITLAB_AUTH_URL
;token_url = AUTH_GITLAB_TOKEN_URL
;api_url = AUTH_GITLAB_API_URL
;allowed_domains = AUTH_GITLAB_ALLOWED_DOMAINS
;allowed_groups = AUTH_GITLAB_ALLOWED_GROUPS

#################################### Google Auth ##########################
[auth.google]
;enabled = AUTH_GOOGLE_ENABLED
;allow_sign_up = AUTH_GOOGLE_ALLOW_SIGN_UP
;client_id = AUTH_GOOGLE_CLIENT_ID
;client_secret = AUTH_GOOGLE_CLIENT_SECRET
;scopes = AUTH_GOOGLE_SCOPES
;auth_url = AUTH_GOOGLE_AUTH_URL
;token_url = AUTH_GOOGLE_TOKEN_URL
;api_url = AUTH_GOOGLE_API_URL
;allowed_domains = AUTH_GOOGLE_ALLOWED_DOMAINS
;hosted_domain = AUTH_GOOGLE_HOSTED_DOMAIN

#################################### Grafana.com Auth ####################
[auth.grafana_com]
;enabled = AUTH_GRAFANA_COM_ENABLED
;allow_sign_up = AUTH_GRAFANA_COM_ALLOW_SIGN_UP
;client_id = AUTH_GRAFANA_COM_CLIENT_ID
;client_secret = AUTH_GRAFANA_COM_CLIENT_SECRET
;scopes = AUTH_GRAFANA_COM_SCOPES
;allowed_organizations = AUTH_GRAFANA_COM_ALLOWED_ORGANIZATIONS

#################################### Azure AD OAuth #######################
[auth.azuread]
;name = AUTH_AZUREAD_NAME
;enabled = AUTH_AZUREAD_ENABLED
;allow_sign_up = AUTH_AZUREAD_ALLOW_SIGN_UP
;client_id = AUTH_AZUREAD_CLIENT_ID
;client_secret = AUTH_AZUREAD_CLIENT_SECRET
;scopes = AUTH_AZUREAD_SCOPES
;auth_url = AUTH_AZUREAD_AUTH_URL
;token_url = AUTH_AZUREAD_TOKEN_URL
;allowed_domains = AUTH_AZUREAD_ALLOWED_DOMAINS
;allowed_groups = AUTH_AZUREAD_ALLOWED_GROUPS

#################################### Okta OAuth #######################
[auth.okta]
;name = AUTH_OKTA_NAME
;enabled = AUTH_OKTA_ENABLED
;allow_sign_up = AUTH_OKTA_ALLOW_SIGN_UP
;client_id = AUTH_OKTA_CLIENT_ID
;client_secret = AUTH_OKTA_CLIENT_SECRET
;scopes = AUTH_OKTA_SCOPES
;auth_url = AUTH_OKTA_AUTH_URL
;token_url = AUTH_OKTA_TOKEN_URL
;api_url = AUTH_OKTA_API_URL
;allowed_domains = AUTH_OKTA_ALLOWED_DOMAINS
;allowed_groups = AUTH_OKTA_ALLOWED_GROUPS
;role_attribute_path = AUTH_OKTA_ROLE_ATTRIBUTE_PATH

#################################### Generic OAuth ##########################
[auth.generic_oauth]
;enabled = AUTH_GENERIC_OAUTH_ENABLED
;name = AUTH_GENERIC_OAUTH_NAME
;allow_sign_up = AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP
;client_id = AUTH_GENERIC_OAUTH_CLIENT_ID
;client_secret = AUTH_GENERIC_OAUTH_CLIENT_SECRET
;scopes = AUTH_GENERIC_OAUTH_SCOPES
;email_attribute_name = AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_NAME
;email_attribute_path = AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_PATH
;login_attribute_path = AUTH_GENERIC_OAUTH_LOGIN_ATTRIBUTE_PATH
;name_attribute_path = AUTH_GENERIC_OAUTH_NAME_ATTRIBUTE_PATH
;id_token_attribute_name = AUTH_GENERIC_OAUTH_ID_TOKEN_ATTRIBUTE_NAME
;auth_url = AUTH_GENERIC_OAUTH_AUTH_URL
;token_url = AUTH_GENERIC_OAUTH_TOKEN_URL
;api_url = AUTH_GENERIC_OAUTH_API_URL
;allowed_domains = AUTH_GENERIC_OAUTH_ALLOWED_DOMAINS
;team_ids = AUTH_GENERIC_OAUTH_TEAM_IDS
;allowed_organizations = AUTH_GENERIC_OAUTH_ALLOWED_ORGANIZATIONS
;role_attribute_path = AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH
;tls_skip_verify_insecure = AUTH_GENERIC_OAUTH_TLS_SKIP_VERIFY_INSECURE
;tls_client_cert = AUTH_GENERIC_OAUTH_TLS_CLIENT_CERT
;tls_client_key = AUTH_GENERIC_OAUTH_TLS_CLIENT_KEY
;tls_client_ca = AUTH_GENERIC_OAUTH_TLS_CLIENT_CA

#################################### Basic Auth ##########################
[auth.basic]
;enabled = AUTH_BASIC_ENABLED

#################################### Auth Proxy ##########################
[auth.proxy]
;enabled = AUTH_PROXY_ENABLED
;header_name = AUTH_PROXY_HEADER_NAME
;header_property = AUTH_PROXY_HEADER_PROPERTY
;auto_sign_up = AUTH_PROXY_AUTO_SIGN_UP
;sync_ttl = AUTH_PROXY_SYNC_TTL
;whitelist = AUTH_PROXY_WHITELIST
;headers = AUTH_PROXY_HEADERS
# Read the auth proxy docs for details on what the setting below enables
;enable_login_token = AUTH_PROXY_ENABLE_LOGIN_TOKEN

#################################### Auth LDAP ##########################
[auth.ldap]
;enabled = AUTH_LDAP_ENABLED
;config_file = AUTH_LDAP_CONFIG_FILE
;allow_sign_up = AUTH_LDAP_ALLOW_SIGN_UP

# LDAP background sync (Enterprise only)
# At 1 am every day
;sync_cron = "AUTH_LDAP_SYNC_CRON"
;active_sync_enabled = AUTH_LDAP_ACTIVE_SYNC_ENABLED

#################################### SMTP / Emailing ##########################
[smtp]
;enabled = SMTP_ENABLED
;host = SMTP_HOST
;user = SMTP_USER
# If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
;password = SMTP_PASSWORD
;cert_file = SMTP_CERT_FILE
;key_file = SMTP_KEY_FILE
;skip_verify = SMTP_SKIP_VERIFY
;from_address = SMTP_FROM_ADDRESS
;from_name = SMTP_FROM_NAME
# EHLO identity in SMTP dialog (defaults to instance_name)
;ehlo_identity = SMTP_EHLO_IDENTITY
# SMTP startTLS policy (defaults to 'OpportunisticStartTLS')
;startTLS_policy = SMTP_STARTTLS_POLICY

[emails]
;welcome_email_on_sign_up = EMAILS_WELCOME_EMAIL_ON_SIGN_UP
;templates_pattern = EMAILS_TEMPLATES_PATTERN

#################################### Logging ##########################
[log]
# Either "console", "file", "syslog". Default is console and  file
# Use space to separate multiple modes, e.g. "console file"
;mode = LOG_MODE

# Either "debug", "info", "warn", "error", "critical", default is "info"
;level = LOG_LEVEL

# optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
;filters = LOG_FILTERS

# For "console" mode only
[log.console]
;level = LOG_CONSOLE_LEVEL

# log line format, valid options are text, console and json
;format = LOG_CONSOLE_FORMAT

# For "file" mode only
[log.file]
;level = LOG_FILE_LEVEL

# log line format, valid options are text, console and json
;format = LOG_FILE_FORMAT

# This enables automated log rotate(switch of following options), default is true
;log_rotate = LOG_FILE_LOG_ROTATE

# Max line number of single file, default is 1000000
;max_lines = LOG_FILE_MAX_LINES

# Max size shift of single file, default is 28 means 1 << 28, 256MB
;max_size_shift = LOG_FILE_MAX_SIZE_SHIFT

# Segment log daily, default is true
;daily_rotate = LOG_FILE_DAILY_ROTATE

# Expired days of log file(delete after max days), default is 7
;max_days = LOG_FILE_MAX_DAYS

[log.syslog]
;level = LOG_SYSLOG_LEVEL

# log line format, valid options are text, console and json
;format = LOG_SYSLOG_FORMAT

# Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
;network = LOG_SYSLOG_NETWORK
;address = LOG_SYSLOG_ADDRESS

# Syslog facility. user, daemon and local0 through local7 are valid.
;facility = LOG_SYSLOG_FACILITY

# Syslog tag. By default, the process' argv[0] is used.
;tag = LOG_SYSLOG_TAG

[log.frontend]
# Should Sentry javascript agent be initialized
;enabled = LOG_FRONTEND_ENABLED

# Sentry DSN if you want to send events to Sentry.
;sentry_dsn = LOG_FRONTEND_SENTRY_DSN

# Custom HTTP endpoint to send events captured by the Sentry agent to. Default will log the events to stdout.
;custom_endpoint = LOG_FRONTEND_CUSTOM_ENDPOINT

# Rate of events to be reported between 0 (none) and 1 (all), float
;sample_rate = LOG_FRONTEND_SAMPLE_RATE

# Requests per second limit enforced an extended period, for Grafana backend log ingestion endpoint (/log).
;log_endpoint_requests_per_second_limit = LOG_FRONTEND_LOG_ENDPOINT_REQUESTS_PER_SECOND_LIMIT

# Max requests accepted per short interval of time for Grafana backend log ingestion endpoint (/log).
;log_endpoint_burst_limit = LOG_FRONTEND_LOG_ENDPOINT_BURST_LIMIT

#################################### Usage Quotas ########################
[quota]
; enabled = QUOTA_ENABLED

#### set quotas to -1 to make unlimited. ####
# limit number of users per Org.
; org_user = QUOTA_ORG_USER

# limit number of dashboards per Org.
; org_dashboard = QUOTA_ORG_DASHBOARD

# limit number of data_sources per Org.
; org_data_source = QUOTA_ORG_DATA_SOURCE

# limit number of api_keys per Org.
; org_api_key = QUOTA_ORG_API_KEY

# limit number of orgs a user can create.
; user_org = QUOTA_USER_ORG

# Global limit of users.
; global_user = QUOTA_GLOBAL_USER

# global limit of orgs.
; global_org = QUOTA_GLOBAL_ORG

# global limit of dashboards
; global_dashboard = QUOTA_GLOBAL_DASHBOARD

# global limit of api_keys
; global_api_key = QUOTA_GLOBAL_API_KEY

# global limit on number of logged in users.
; global_session = QUOTA_GLOBAL_SESSION

#################################### Alerting ############################
[alerting]
# Disable alerting engine & UI features
;enabled = ALERTING_ENABLED
# Makes it possible to turn off alert rule execution but alerting UI is visible
;execute_alerts = ALERTING_EXECUTE_ALERTS

# Default setting for new alert rules. Defaults to categorize error and timeouts as alerting. (alerting, keep_state)
;error_or_timeout = ALERTING_ERROR_OR_TIMEOUT

# Default setting for how Grafana handles nodata or null values in alerting. (alerting, no_data, keep_state, ok)
;nodata_or_nullvalues = ALERTING_NODATA_OR_NULLVALUES

# Alert notifications can include images, but rendering many images at the same time can overload the server
# This limit will protect the server from render overloading and make sure notifications are sent out quickly
;concurrent_render_limit = ALERTING_CONCURRENT_RENDER_LIMIT


# Default setting for alert calculation timeout. Default value is 30
;evaluation_timeout_seconds = ALERTING_EVALUATION_TIMEOUT_SECONDS

# Default setting for alert notification timeout. Default value is 30
;notification_timeout_seconds = ALERTING_NOTIFICATION_TIMEOUT_SECONDS

# Default setting for max attempts to sending alert notifications. Default value is 3
;max_attempts = ALERTING_MAX_ATTEMPTS

# Makes it possible to enforce a minimal interval between evaluations, to reduce load on the backend
;min_interval_seconds = ALERTING_MIN_INTERVAL_SECONDS

# Configures for how long alert annotations are stored. Default is 0, which keeps them forever.
# This setting should be expressed as a duration. Examples: 6h (hours), 10d (days), 2w (weeks), 1M (month).
;max_annotation_age = ALERTING_MAX_ANNOTATION_AGE

# Configures max number of alert annotations that Grafana stores. Default value is 0, which keeps all alert annotations.
;max_annotations_to_keep = ALERTING_MAX_ANNOTATIONS_TO_KEEP

#################################### Annotations #########################

[annotations.dashboard]
# Dashboard annotations means that annotations are associated with the dashboard they are created on.

# Configures how long dashboard annotations are stored. Default is 0, which keeps them forever.
# This setting should be expressed as a duration. Examples: 6h (hours), 10d (days), 2w (weeks), 1M (month).
;max_age = ANNOTATIONS_DASHBOARD_MAX_AGE

# Configures max number of dashboard annotations that Grafana stores. Default value is 0, which keeps all dashboard annotations.
;max_annotations_to_keep = ANNOTATIONS_DASHBOARD_MAX_ANNOTATIONS_TO_KEEP

[annotations.api]
# API annotations means that the annotations have been created using the API without any
# association with a dashboard.

# Configures how long Grafana stores API annotations. Default is 0, which keeps them forever.
# This setting should be expressed as a duration. Examples: 6h (hours), 10d (days), 2w (weeks), 1M (month).
;max_age = ANNOTATIONS_API_MAX_AGE

# Configures max number of API annotations that Grafana keeps. Default value is 0, which keeps all API annotations.
;max_annotations_to_keep = ANNOTATIONS_API_MAX_ANNOTATIONS_TO_KEEP

#################################### Explore #############################
[explore]
# Enable the Explore section
;enabled = EXPLORE_ENABLED

#################################### Internal Grafana Metrics ##########################
# Metrics available at HTTP API Url /metrics
[metrics]
# Disable / Enable internal metrics
;enabled           = METRICS_ENABLED
# Graphite Publish interval
;interval_seconds  = METRICS_INTERVAL_SECONDS
# Disable total stats (stat_totals_*) metrics to be generated
;disable_total_stats = METRICS_DISABLE_TOTAL_STATS

#If both are set, basic auth will be required for the metrics endpoint.
; basic_auth_username = METRICS_BASIC_AUTH_USERNAME
; basic_auth_password = METRICS_BASIC_AUTH_PASSWORD

# Metrics environment info adds dimensions to the `grafana_environment_info` metric, which
# can expose more information about the Grafana instance.
[metrics.environment_info]
#exampleLabel1 = METRICS_EXAMPLELABEL1
#exampleLabel2 = METRICS_EXAMPLELABEL2

# Send internal metrics to Graphite
[metrics.graphite]
# Enable by setting the address setting (ex localhost:2003)
;address = METRICS_ADDRESS
;prefix = METRICS_PREFIX

#################################### Grafana.com integration  ##########################
# Url used to import dashboards directly from Grafana.com
[grafana_com]
;url = GRAFANA_COM_URL

#################################### Distributed tracing ############
[tracing.jaeger]
# Enable by setting the address sending traces to jaeger (ex localhost:6831)
;address = TRACING_JAEGER_ADDRESS
# Tag that will always be included in when creating new spans. ex (tag1:value1,tag2:value2)
;always_included_tag = TRACING_JAEGER_ALWAYS_INCLUDED_TAG
# Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
;sampler_type = TRACING_JAEGER_SAMPLER_TYPE
# jaeger samplerconfig param
# for "const" sampler, 0 or 1 for always false/true respectively
# for "probabilistic" sampler, a probability between 0 and 1
# for "rateLimiting" sampler, the number of spans per second
# for "remote" sampler, param is the same as for "probabilistic"
# and indicates the initial sampling rate before the actual one
# is received from the mothership
;sampler_param = TRACING_JAEGER_SAMPLER_PARAM
# sampling_server_url is the URL of a sampling manager providing a sampling strategy.
;sampling_server_url = TRACING_JAEGER_SAMPLING_SERVER_URL
# Whether or not to use Zipkin propagation (x-b3- HTTP headers).
;zipkin_propagation = TRACING_JAEGER_ZIPKIN_PROPAGATION
# Setting this to true disables shared RPC spans.
# Not disabling is the most common setting when using Zipkin elsewhere in your infrastructure.
;disable_shared_zipkin_spans = TRACING_JAEGER_DISABLE_SHARED_ZIPKIN_SPANS

#################################### External image storage ##########################
[external_image_storage]
# Used for uploading images to public servers so they can be included in slack/email messages.
# you can choose between (s3, webdav, gcs, azure_blob, local)
;provider = EXTERNAL_IMAGE_STORAGE_PROVIDER

[external_image_storage.s3]
;endpoint = EXTERNAL_IMAGE_STORAGE_S3_ENDPOINT
;path_style_access = EXTERNAL_IMAGE_STORAGE_S3_PATH_STYLE_ACCESS
;bucket = EXTERNAL_IMAGE_STORAGE_S3_BUCKET
;region = EXTERNAL_IMAGE_STORAGE_S3_REGION
;path = EXTERNAL_IMAGE_STORAGE_S3_PATH
;access_key = EXTERNAL_IMAGE_STORAGE_S3_ACCESS_KEY
;secret_key = EXTERNAL_IMAGE_STORAGE_S3_SECRET_KEY

[external_image_storage.webdav]
;url = EXTERNAL_IMAGE_STORAGE_WEBDAV_URL
;public_url = EXTERNAL_IMAGE_STORAGE_WEBDAV_PUBLIC_URL
;username = EXTERNAL_IMAGE_STORAGE_WEBDAV_USERNAME
;password = EXTERNAL_IMAGE_STORAGE_WEBDAV_PASSWORD

[external_image_storage.gcs]
;key_file = EXTERNAL_IMAGE_STORAGE_GCS_KEY_FILE
;bucket = EXTERNAL_IMAGE_STORAGE_GCS_BUCKET
;path = EXTERNAL_IMAGE_STORAGE_GCS_PATH

[external_image_storage.azure_blob]
;account_name = EXTERNAL_IMAGE_STORAGE_AZURE_BLOB_ACCOUNT_NAME
;account_key = EXTERNAL_IMAGE_STORAGE_AZURE_BLOB_ACCOUNT_KEY
;container_name = EXTERNAL_IMAGE_STORAGE_AZURE_BLOB_CONTAINER_NAME

[external_image_storage.local]
# does not require any configuration

[rendering]
# Options to configure a remote HTTP image rendering service, e.g. using https://github.com/grafana/grafana-image-renderer.
# URL to a remote HTTP image renderer service, e.g. http://localhost:8081/render, will enable Grafana to render panels and dashboards to PNG-images using HTTP requests to an external service.
;server_url = RENDERING_SERVER_URL
# If the remote HTTP image renderer service runs on a different server than the Grafana server you may have to configure this to a URL where Grafana is reachable, e.g. http://grafana.domain/.
;callback_url = RENDERING_CALLBACK_URL
# Concurrent render request limit affects when the /render HTTP endpoint is used. Rendering many images at the same time can overload the server,
# which this setting can help protect against by only allowing a certain amount of concurrent requests.
;concurrent_render_request_limit = RENDERING_CONCURRENT_RENDER_REQUEST_LIMIT

[panels]
# If set to true Grafana will allow script tags in text panels. Not recommended as it enable XSS vulnerabilities.
;disable_sanitize_html = PANELS_DISABLE_SANITIZE_HTML

[plugins]
;enable_alpha = PLUGINS_ENABLE_ALPHA
;app_tls_skip_verify_insecure = PLUGINS_APP_TLS_SKIP_VERIFY_INSECURE
# Enter a comma-separated list of plugin identifiers to identify plugins that are allowed to be loaded even if they lack a valid signature.
;allow_loading_unsigned_plugins = PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS
;marketplace_url = PLUGINS_MARKETPLACE_URL

#################################### Grafana Image Renderer Plugin ##########################
[plugin.grafana-image-renderer]
# Instruct headless browser instance to use a default timezone when not provided by Grafana, e.g. when rendering panel image of alert.
# See ICU’s metaZones.txt (https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt) for a list of supported
# timezone IDs. Fallbacks to TZ environment variable if not set.
;rendering_timezone = PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_TIMEZONE

# Instruct headless browser instance to use a default language when not provided by Grafana, e.g. when rendering panel image of alert.
# Please refer to the HTTP header Accept-Language to understand how to format this value, e.g. 'fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5'.
;rendering_language = PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_LANGUAGE

# Instruct headless browser instance to use a default device scale factor when not provided by Grafana, e.g. when rendering panel image of alert.
# Default is 1. Using a higher value will produce more detailed images (higher DPI), but will require more disk space to store an image.
;rendering_viewport_device_scale_factor = PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_VIEWPORT_DEVICE_SCALE_FACTOR

# Instruct headless browser instance whether to ignore HTTPS errors during navigation. Per default HTTPS errors are not ignored. Due to
# the security risk it's not recommended to ignore HTTPS errors.
;rendering_ignore_https_errors = PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_IGNORE_HTTPS_ERRORS

# Instruct headless browser instance whether to capture and log verbose information when rendering an image. Default is false and will
# only capture and log error messages. When enabled, debug messages are captured and logged as well.
# For the verbose information to be included in the Grafana server log you have to adjust the rendering log level to debug, configure
# [log].filter = rendering:debug.
;rendering_verbose_logging = PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_VERBOSE_LOGGING

# Instruct headless browser instance whether to output its debug and error messages into running process of remote rendering service.
# Default is false. This can be useful to enable (true) when troubleshooting.
;rendering_dumpio = PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_DUMPIO

# Additional arguments to pass to the headless browser instance. Default is --no-sandbox. The list of Chromium flags can be found
# here (https://peter.sh/experiments/chromium-command-line-switches/). Multiple arguments is separated with comma-character.
;rendering_args = PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_ARGS

# You can configure the plugin to use a different browser binary instead of the pre-packaged version of Chromium.
# Please note that this is not recommended, since you may encounter problems if the installed version of Chrome/Chromium is not
# compatible with the plugin.
;rendering_chrome_bin = PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_CHROME_BIN

# Instruct how headless browser instances are created. Default is 'default' and will create a new browser instance on each request.
# Mode 'clustered' will make sure that only a maximum of browsers/incognito pages can execute concurrently.
# Mode 'reusable' will have one browser instance and will create a new incognito page on each request.
;rendering_mode = PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_MODE

# When rendering_mode = clustered you can instruct how many browsers or incognito pages can execute concurrently. Default is 'browser'
# and will cluster using browser instances.
# Mode 'context' will cluster using incognito pages.
;rendering_clustering_mode = PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_CLUSTERING_MODE
# When rendering_mode = clustered you can define maximum number of browser instances/incognito pages that can execute concurrently..
;rendering_clustering_max_concurrency = PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_CLUSTERING_MAX_CONCURRENCY

# Limit the maximum viewport width, height and device scale factor that can be requested.
;rendering_viewport_max_width = PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_VIEWPORT_MAX_WIDTH
;rendering_viewport_max_height = PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_VIEWPORT_MAX_HEIGHT
;rendering_viewport_max_device_scale_factor = PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_VIEWPORT_MAX_DEVICE_SCALE_FACTOR

# Change the listening host and port of the gRPC server. Default host is 127.0.0.1 and default port is 0 and will automatically assign
# a port not in use.
;grpc_host = PLUGIN_GRAFANA_IMAGE_RENDERER_GRPC_HOST
;grpc_port = PLUGIN_GRAFANA_IMAGE_RENDERER_GRPC_PORT

[enterprise]
# Path to a valid Grafana Enterprise license.jwt file
;license_path = ENTERPRISE_LICENSE_PATH

[feature_toggles]
# enable features, separated by spaces
;enable = FEATURE_TOGGLES_ENABLE

[date_formats]
# For information on what formatting patterns that are supported https://momentjs.com/docs/#/displaying/

# Default system date format used in time range picker and other places where full time is displayed
;full_date = DATE_FORMATS_FULL_DATE

# Used by graph and other places where we only show small intervals
;interval_second = DATE_FORMATS_INTERVAL_SECOND
;interval_minute = DATE_FORMATS_INTERVAL_MINUTE
;interval_hour = DATE_FORMATS_INTERVAL_HOUR
;interval_day = DATE_FORMATS_INTERVAL_DAY
;interval_month = DATE_FORMATS_INTERVAL_MONTH
;interval_year = DATE_FORMATS_INTERVAL_YEAR

# Experimental feature
;use_browser_locale = DATE_FORMATS_USE_BROWSER_LOCALE

# Default timezone for user preferences. Options are 'browser' for the browser local timezone or a timezone name from IANA Time Zone database, e.g. 'UTC' or 'Europe/Amsterdam' etc.
;default_timezone = DATE_FORMATS_DEFAULT_TIMEZONE

[expressions]
# Enable or disable the expressions functionality.
;enabled = EXPRESSIONS_ENABLED

